{"version":3,"sources":["clinical.controller.js"],"names":["jwtEncode","require","db","set","Clinical","clinical","limitAccNum","setToken","exports","signup","req","res","console","log","response","body","findOne","email","expirationTime","isUser","entryDate","Date","auth","save","payload","userRole","Math","floor","now","token","status","json","message","_context","t0","password","iat","exp","updateOne","$set","logined","user","_context2","Update","request","regeneratorRuntime","async","_context3","prev","next","findOneAndUpdate","new","err","updatedDocument","error","login","stop","Auth","accountId","_context4"],"mappings":"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","file":"clinical.controller.min.js","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Clinical = db.clinical;\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 600;\r\n//Regiseter Account\r\nexports.signup = async (req, res) => {\r\n    try {\r\n        console.log(\"regiester\");\r\n        const response = req.body;\r\n        // const accountId = req.params.accountId;\r\n        const isUser = await Clinical.findOne({email: response.email});\r\n        console.log(isUser);\r\n        if(!isUser) {\r\n            response.entryDate = new Date();\r\n            const auth = new Clinical(response);\r\n            await auth.save();\r\n            const payload = {\r\n                email: response.email,\r\n                userRole: response.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            res.status(201).json({message: \"Successfully Regisetered\", token: token});\r\n        }\r\n        else {\r\n            res.status(409).json({message: \"The Email is already registered\"})\r\n        }\r\n    } catch(e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"});\r\n    }\r\n}\r\n\r\n//Login Account\r\nexports.login = async (req, res) => {\r\n    try {\r\n        console.log(\"LogIn\");\r\n        const {email, password, userRole} = req.body;\r\n        const isUser = await Clinical.findOne({email: email, password: password, userRole: userRole});\r\n        if (isUser) {\r\n            \r\n            const payload = {\r\n                email: isUser.email,\r\n                userRole: isUser.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            if (token) {\r\n                const updateUser = await Clinical.updateOne({email: email, userRole: userRole}, {$set: {logined: true}});\r\n                res.status(200).json({message: \"Successfully Logined!\", token: token, user: isUser});\r\n            }\r\n            else {\r\n                res.status(400).json({message: \"Cannot logined User!\"})\r\n            }\r\n        }\r\n        else {\r\n            res.status(404).json({message: \"User Not Found! Please Register First.\"})\r\n        }\r\n    } catch(e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"})\r\n    }\r\n}\r\n\r\n//Update Account\r\nexports.Update = async (req, res) => {\r\n  console.log('updateSignal');\r\n  const request = req.body;\r\n  const user = req.user;\r\n  if (user) {\r\n    console.log(\"items\");\r\n    Clinical.findOneAndUpdate({user}, {$set: request}, { new: false }, (err, updatedDocument) => {if (err) {\r\n      // Handle the error, e.g., return an error response\r\n      res.status(500).json({ error: err });\r\n      console.log(err);\r\n  } else {\r\n      console.log(\"updated\", updatedDocument);\r\n      const payload = {\r\n          email: user.email,\r\n          userRole: user.userRole,\r\n          iat: Math.floor(Date.now() / 1000), // Issued at time\r\n          exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n      }\r\n      const token = setToken(payload);\r\n      console.log(token);\r\n      // Document updated successfully, return the updated document as the response\r\n      res.status(200).json({ message: 'Trading Signals saved Successfully', token:token, user:updatedDocument });\r\n  }} )\r\n  }\r\n\r\n\r\n}\r\n\r\n//Logout Account\r\nexports.logout = async (req, res) => {\r\n    try {\r\n        console.log('Logout');\r\n        const email = req.body;\r\n        const logoutUser = await Auth.updateOne({accountId: accountId}, {$set: {logined: false}});\r\n        res.status(200).json({email: email, logined: logined})\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"});\r\n    }\r\n}\r\n"]}