{"version":3,"sources":["job.controller.js"],"names":["jwtEncode","require","db","setToken","set","Job","jobs","limitAccNum","expirationTime","exports","postJob","req","res","console","log","find","sort","jobId","limit","lastJob","lastJobId","length","newJobId","response","body","user","findOne","isUser","entryDate","Date","auth","save","payload","email","userRole","iat","Math","floor","now","exp","token","status","json","message","shifts","updateOne","$set","logined","updateUser","Data"],"mappings":"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","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Job = db.jobs;\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 600;\r\n//Regiseter Account\r\nexports.postJob = async (req, res) => {\r\n  try {\r\n    console.log(\"register\");\r\n    const lastJob = await Job.find().sort({ jobId: -1 }).limit(1); // Retrieve the last jobId\r\n    const lastJobId = lastJob.length > 0 ? lastJob[0].jobId : 0; // Get the last jobId value or default to 0\r\n    const newJobId = lastJobId + 1; // Increment the last jobId by 1 to set the new jobId for the next data entry\r\n    const response = req.body;\r\n    const user = req.user\r\n    console.log(\"new Id------------->\", newJobId)\r\n    // const accountId = req.params.accountId;\r\n    const isUser = await Job.findOne({jobId: newJobId});\r\n    \r\n    console.log(isUser);\r\n    if(!isUser) {\r\n      response.entryDate = new Date();\r\n      response.jobId = newJobId;\r\n      const auth = new Job(response);\r\n      await auth.save();\r\n      const payload = {\r\n        email: user.email,\r\n        userRole: user.userRole,\r\n        iat: Math.floor(Date.now() / 1000), // Issued at time\r\n        exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n      }\r\n      const token = setToken(payload);\r\n      console.log(token);\r\n      res.status(201).json({message: \"Successfully Registered\", token: token});\r\n    }\r\n    else {\r\n      res.status(409).json({message: \"The Email is already registered\"})\r\n    }\r\n  } catch(e) {\r\n    console.log(e);\r\n    return res.status(500).json({message: \"An Error Occured!\"});\r\n  }\r\n}\r\n\r\n//Login Account\r\nexports.shifts = async (req, res) => {\r\n  try {\r\n    console.log(\"LogIn\");\r\n    const user = req.user;\r\n    const isUser = await Job.find({});\r\n    if (isUser) {\r\n      const payload = {\r\n        email: user.email,\r\n        userRole: user.userRole,\r\n        iat: Math.floor(Date.now() / 1000), // Issued at time\r\n        exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n      }\r\n      const token = setToken(payload);\r\n      console.log(token);\r\n      if (token) {\r\n        const updateUser = await Job.updateOne({email: email, userRole: userRole}, {$set: {logined: true}});\r\n        res.status(200).json({message: \"Successfully Get!\", Data: isUser, token: token, user: user});\r\n      }\r\n      else {\r\n        res.status(400).json({message: \"Cannot logined User!\"})\r\n      }\r\n    }\r\n    else {\r\n      res.status(404).json({message: \"User Not Found! Please Register First.\"})\r\n    }\r\n  } catch(e) {\r\n    console.log(e);\r\n    return res.status(500).json({message: \"An Error Occured!\"})\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"file":"job.controller.dev.js"}