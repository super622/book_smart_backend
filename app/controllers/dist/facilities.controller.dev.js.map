{"version":3,"sources":["facilities.controller.js"],"names":["jwtEncode","require","db","setToken","set","Facility","facilities","limitAccNum","expirationTime","exports","signup","req","res","console","log","response","body","findOne","email","isUser","entryDate","Date","auth","save","payload","userRole","iat","Math","floor","now","exp","token","status","json","message","login","contactEmail","password","updateOne","$set","userStatus","updateUser","user","Update","request","findOneAndUpdate","err","updatedDocument","error","logout","Auth","accountId","logined","logoutUser"],"mappings":"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","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Facility = db.facilities;\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 600;\r\n//Register Account\r\nexports.signup = async (req, res) => {\r\n    try {\r\n        console.log(\"register\");\r\n        const response = req.body;\r\n        // const accountId = req.params.accountId;\r\n        const isUser = await Facility.findOne({email: response.email});\r\n        console.log(isUser);\r\n        if(!isUser) {\r\n            response.entryDate = new Date();\r\n            const auth = new Facility(response);\r\n            console.log(auth)\r\n            await auth.save();\r\n            const payload = {\r\n                email: response.email,\r\n                userRole: response.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            res.status(201).json({message: \"Successfully Registered\", token: token});\r\n        }\r\n        else {\r\n            res.status(409).json({message: \"The Email is already registered\"})\r\n        }\r\n    } catch(e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"});\r\n    }\r\n}\r\n\r\n//Login Account\r\nexports.login = async (req, res) => {\r\n    try {\r\n        console.log(\"LogIn\");\r\n        const {contactEmail, password, userRole} = req.body;\r\n        console.log(\"email: \",contactEmail)\r\n        const isUser = await Facility.findOne({contactEmail: contactEmail, password: password, userRole: userRole});\r\n        if (isUser) {\r\n            console.log('isUser', isUser)\r\n            const payload = {\r\n                contactEmail: isUser.contactEmail,\r\n                userRole: isUser.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            if (token) {\r\n                const updateUser = await Facility.updateOne({contactEmail: contactEmail, userRole: userRole}, {$set: {userStatus: true}});\r\n                res.status(200).json({message: \"Successfully Logined!\", token: token, user: isUser});\r\n            }\r\n            else {\r\n                res.status(400).json({message: \"Cannot logined User!\"})\r\n            }\r\n        }\r\n        else {\r\n            res.status(404).json({message: \"User Not Found! Please Register First.\"})\r\n        }\r\n    } catch(e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"})\r\n    }\r\n}\r\n\r\n//Update Account\r\nexports.Update = async (req, res) => {\r\n  console.log('updateSignal');\r\n  const request = req.body;\r\n  const user = req.user;\r\n  if (user) {\r\n    console.log(\"items\");\r\n    Facility.findOneAndUpdate({user}, {$set: request}, { new: false }, (err, updatedDocument) => {if (err) {\r\n      // Handle the error, e.g., return an error response\r\n      res.status(500).json({ error: err });\r\n      console.log(err);\r\n    } else {\r\n        console.log(\"updated\", updatedDocument);\r\n        const payload = {\r\n            email: user.email,\r\n            userRole: user.userRole,\r\n            iat: Math.floor(Date.now() / 1000), // Issued at time\r\n            exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n        }\r\n        const token = setToken(payload);\r\n        console.log(token);\r\n        // Document updated successfully, return the updated document as the response\r\n        res.status(200).json({ message: 'Trading Signals saved Successfully', token:token, user:updatedDocument });\r\n    }} )\r\n  }\r\n\r\n\r\n}\r\n\r\n//Logout Account\r\nexports.logout = async (req, res) => {\r\n    try {\r\n        console.log('Logout');\r\n        const email = req.body;\r\n        const logoutUser = await Auth.updateOne({accountId: accountId}, {$set: {logined: false}});\r\n        res.status(200).json({email: email, logined: logined})\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"});\r\n    }\r\n}\r\n"],"file":"facilities.controller.dev.js"}