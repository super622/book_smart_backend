{"version":3,"sources":["job.controller.js"],"names":["jwtEncode","require","db","set","Job","limitAccNum","setToken","exports","postJob","req","res","console","log","find","sort","jobId","limit","lastJob","length","expirationTime","lastJobId","response","body","user","newJobId","findOne","isUser","Date","auth","save","payload","email","userRole","floor","now","exp","Math","token","status","json","message","_context","t0","regeneratorRuntime","async","_context2","prev","next","awrap","sent","entryDate","updateOne","$set","logined","Data","abrupt","stop"],"mappings":"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","file":"job.controller.min.js","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Job = db.jobs;\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 600;\r\n//Regiseter Account\r\nexports.postJob = async (req, res) => {\r\n  try {\r\n    console.log(\"register\");\r\n    const lastJob = await Job.find().sort({ jobId: -1 }).limit(1); // Retrieve the last jobId\r\n    const lastJobId = lastJob.length > 0 ? lastJob[0].jobId : 0; // Get the last jobId value or default to 0\r\n    const newJobId = lastJobId + 1; // Increment the last jobId by 1 to set the new jobId for the next data entry\r\n    const response = req.body;\r\n    const user = req.user\r\n    console.log(\"new Id------------->\", newJobId)\r\n    // const accountId = req.params.accountId;\r\n    const isUser = await Job.findOne({jobId: newJobId});\r\n    \r\n    console.log(isUser);\r\n    if(!isUser) {\r\n      response.entryDate = new Date();\r\n      response.jobId = newJobId;\r\n      const auth = new Job(response);\r\n      await auth.save();\r\n      const payload = {\r\n        email: user.email,\r\n        userRole: user.userRole,\r\n        iat: Math.floor(Date.now() / 1000), // Issued at time\r\n        exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n      }\r\n      const token = setToken(payload);\r\n      console.log(token);\r\n      res.status(201).json({message: \"Successfully Registered\", token: token});\r\n    }\r\n    else {\r\n      res.status(409).json({message: \"The Email is already registered\"})\r\n    }\r\n  } catch(e) {\r\n    console.log(e);\r\n    return res.status(500).json({message: \"An Error Occured!\"});\r\n  }\r\n}\r\n\r\n//Login Account\r\nexports.shifts = async (req, res) => {\r\n  try {\r\n    console.log(\"LogIn\");\r\n    const user = req.user;\r\n    const isUser = await Job.find({});\r\n    if (isUser) {\r\n      const payload = {\r\n        email: user.email,\r\n        userRole: user.userRole,\r\n        iat: Math.floor(Date.now() / 1000), // Issued at time\r\n        exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n      }\r\n      const token = setToken(payload);\r\n      console.log(token);\r\n      if (token) {\r\n        const updateUser = await Job.updateOne({email: email, userRole: userRole}, {$set: {logined: true}});\r\n        res.status(200).json({message: \"Successfully Get!\", Data: isUser, token: token, user: user});\r\n      }\r\n      else {\r\n        res.status(400).json({message: \"Cannot logined User!\"})\r\n      }\r\n    }\r\n    else {\r\n      res.status(404).json({message: \"User Not Found! Please Register First.\"})\r\n    }\r\n  } catch(e) {\r\n    console.log(e);\r\n    return res.status(500).json({message: \"An Error Occured!\"})\r\n  }\r\n}\r\n\r\n\r\n\r\n"]}