{"version":3,"sources":["facilities.controller.js"],"names":["jwtEncode","require","db","set","Facility","facilities","limitAccNum","setToken","exports","signup","req","res","console","log","response","body","findOne","email","expirationTime","isUser","entryDate","Date","auth","save","payload","userRole","now","exp","Math","floor","token","status","json","message","_context","t0","_req$body","contactEmail","password","regeneratorRuntime","async","_context2","prev","next","awrap","sent","iat","updateOne","$set","userStatus","abrupt","stop","Update","request","user","_context3","findOneAndUpdate","new","err","updatedDocument","error","login","Auth","accountId","logined","_context4"],"mappings":"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","file":"facilities.controller.min.js","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Facility = db.facilities;\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 600;\r\n//Register Account\r\nexports.signup = async (req, res) => {\r\n    try {\r\n        console.log(\"register\");\r\n        const response = req.body;\r\n        // const accountId = req.params.accountId;\r\n        const isUser = await Facility.findOne({email: response.email});\r\n        console.log(isUser);\r\n        if(!isUser) {\r\n            response.entryDate = new Date();\r\n            const auth = new Facility(response);\r\n            console.log(auth)\r\n            await auth.save();\r\n            const payload = {\r\n                email: response.email,\r\n                userRole: response.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            res.status(201).json({message: \"Successfully Registered\", token: token});\r\n        }\r\n        else {\r\n            res.status(409).json({message: \"The Email is already registered\"})\r\n        }\r\n    } catch(e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"});\r\n    }\r\n}\r\n\r\n//Login Account\r\nexports.login = async (req, res) => {\r\n    try {\r\n        console.log(\"LogIn\");\r\n        const {contactEmail, password, userRole} = req.body;\r\n        console.log(\"email: \",contactEmail)\r\n        const isUser = await Facility.findOne({contactEmail: contactEmail, password: password, userRole: userRole});\r\n        if (isUser) {\r\n            console.log('isUser', isUser)\r\n            const payload = {\r\n                contactEmail: isUser.contactEmail,\r\n                userRole: isUser.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            if (token) {\r\n                const updateUser = await Facility.updateOne({contactEmail: contactEmail, userRole: userRole}, {$set: {userStatus: true}});\r\n                res.status(200).json({message: \"Successfully Logined!\", token: token, user: isUser});\r\n            }\r\n            else {\r\n                res.status(400).json({message: \"Cannot logined User!\"})\r\n            }\r\n        }\r\n        else {\r\n            res.status(404).json({message: \"User Not Found! Please Register First.\"})\r\n        }\r\n    } catch(e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"})\r\n    }\r\n}\r\n\r\n//Update Account\r\nexports.Update = async (req, res) => {\r\n  console.log('updateSignal');\r\n  const request = req.body;\r\n  const user = req.user;\r\n  if (user) {\r\n    console.log(\"items\");\r\n    Facility.findOneAndUpdate({user}, {$set: request}, { new: false }, (err, updatedDocument) => {if (err) {\r\n      // Handle the error, e.g., return an error response\r\n      res.status(500).json({ error: err });\r\n      console.log(err);\r\n    } else {\r\n        console.log(\"updated\", updatedDocument);\r\n        const payload = {\r\n            email: user.email,\r\n            userRole: user.userRole,\r\n            iat: Math.floor(Date.now() / 1000), // Issued at time\r\n            exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n        }\r\n        const token = setToken(payload);\r\n        console.log(token);\r\n        // Document updated successfully, return the updated document as the response\r\n        res.status(200).json({ message: 'Trading Signals saved Successfully', token:token, user:updatedDocument });\r\n    }} )\r\n  }\r\n\r\n\r\n}\r\n\r\n//Logout Account\r\nexports.logout = async (req, res) => {\r\n    try {\r\n        console.log('Logout');\r\n        const email = req.body;\r\n        const logoutUser = await Auth.updateOne({accountId: accountId}, {$set: {logined: false}});\r\n        res.status(200).json({email: email, logined: logined})\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"});\r\n    }\r\n}\r\n"]}