{"version":3,"sources":["clinical.controller.js"],"names":["jwtEncode","require","db","setToken","set","Clinical","clinical","limitAccNum","expirationTime","exports","signup","req","res","console","log","response","body","findOne","email","isUser","entryDate","Date","auth","save","payload","userRole","iat","Math","floor","now","exp","token","status","json","message","login","password","updateOne","$set","logined","updateUser","user","Update","request","findOneAndUpdate","err","updatedDocument","error","logout","Auth","accountId","logoutUser"],"mappings":"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","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Clinical = db.clinical;\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 600;\r\n//Regiseter Account\r\nexports.signup = async (req, res) => {\r\n    try {\r\n        console.log(\"regiester\");\r\n        const response = req.body;\r\n        // const accountId = req.params.accountId;\r\n        const isUser = await Clinical.findOne({email: response.email});\r\n        console.log(isUser);\r\n        if(!isUser) {\r\n            response.entryDate = new Date();\r\n            const auth = new Clinical(response);\r\n            await auth.save();\r\n            const payload = {\r\n                email: response.email,\r\n                userRole: response.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            res.status(201).json({message: \"Successfully Regisetered\", token: token});\r\n        }\r\n        else {\r\n            res.status(409).json({message: \"The Email is already registered\"})\r\n        }\r\n    } catch(e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"});\r\n    }\r\n}\r\n\r\n//Login Account\r\nexports.login = async (req, res) => {\r\n    try {\r\n        console.log(\"LogIn\");\r\n        const {email, password, userRole} = req.body;\r\n        const isUser = await Clinical.findOne({email: email, password: password, userRole: userRole});\r\n        if (isUser) {\r\n            \r\n            const payload = {\r\n                email: isUser.email,\r\n                userRole: isUser.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            if (token) {\r\n                const updateUser = await Clinical.updateOne({email: email, userRole: userRole}, {$set: {logined: true}});\r\n                res.status(200).json({message: \"Successfully Logined!\", token: token, user: isUser});\r\n            }\r\n            else {\r\n                res.status(400).json({message: \"Cannot logined User!\"})\r\n            }\r\n        }\r\n        else {\r\n            res.status(404).json({message: \"User Not Found! Please Register First.\"})\r\n        }\r\n    } catch(e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"})\r\n    }\r\n}\r\n\r\n//Update Account\r\nexports.Update = async (req, res) => {\r\n  console.log('updateSignal');\r\n  const request = req.body;\r\n  const user = req.user;\r\n  if (user) {\r\n    console.log(\"items\");\r\n    Clinical.findOneAndUpdate({user}, {$set: request}, { new: false }, (err, updatedDocument) => {if (err) {\r\n      // Handle the error, e.g., return an error response\r\n      res.status(500).json({ error: err });\r\n      console.log(err);\r\n  } else {\r\n      console.log(\"updated\", updatedDocument);\r\n      const payload = {\r\n          email: user.email,\r\n          userRole: user.userRole,\r\n          iat: Math.floor(Date.now() / 1000), // Issued at time\r\n          exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n      }\r\n      const token = setToken(payload);\r\n      console.log(token);\r\n      // Document updated successfully, return the updated document as the response\r\n      res.status(200).json({ message: 'Trading Signals saved Successfully', token:token, user:updatedDocument });\r\n  }} )\r\n  }\r\n\r\n\r\n}\r\n\r\n//Logout Account\r\nexports.logout = async (req, res) => {\r\n    try {\r\n        console.log('Logout');\r\n        const email = req.body;\r\n        const logoutUser = await Auth.updateOne({accountId: accountId}, {$set: {logined: false}});\r\n        res.status(200).json({email: email, logined: logined})\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({message: \"An Error Occured!\"});\r\n    }\r\n}\r\n"],"file":"clinical.controller.dev.js"}