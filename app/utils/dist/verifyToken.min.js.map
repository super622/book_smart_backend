{"version":3,"sources":["verifyToken.js"],"names":["jwt","require","db","Clinical","clinical","Facility","facilities","expirationTime","res","next","authorization","authHeader","verifyToken","log","token","status","json","success","message","process","env","JWT_SECRET_KEY","err","user","console","req","tokendata","sign","isUser","regeneratorRuntime","async","_context","prev","userRole","awrap","setToken","email","sent","verifyUser","exp","stop","verifyAdmin","module","exports"],"mappings":"aAAA,IAAMA,IAAMC,QAAQ,gBACdC,GAAKD,QAAQ,aADbD,KAAMC,GAAAA,gBAGNE,SAAYD,GAAGE,SAFbC,SAAWH,GAAAI,WAIbC,eAAiB,OAFjBJ,YAAeC,SAAAA,EAArBI,EAAAC,GACMJ,IAAAA,EAAcC,EAAAA,QAApBI,cAMI,GALEH,QAAAA,IAAAA,GAKEI,EAAY,CAHdC,QAAWC,IAAG,UACVF,IAAAA,EAAgBA,EAASD,MAAAA,KAA/B,GAMI,IAAKI,EAJLH,OAAYH,EAAAO,OAAA,KAAAC,KAAA,CAAAC,SAAA,EAAAC,QAAA,4BAIRlB,IAACc,OAAOA,EAAAK,QAAAC,IAAAC,eAAA,SAAAC,EAAAC,GACR,GAAUD,EAA2C,OAAhBE,QAATX,IAAA,MAAAS,GAA2Bd,EAAAO,OAAA,KAAAC,KAAA,CAAAC,SAAA,EAAAC,QAAA,qBAG3DO,EAAAF,KAAAA,EAQId,QAJkCQ,SAAO,SAAAS,GACxC,OADiDR,QAAAA,IAAAA,QAASE,IAAAC,gBAAvDrB,IAAA2B,KAAAD,EAAAP,QAAAC,IAAAC,iBAIJZ,WAAI,SAAAgB,EAAAjB,EAAAC,GACPe,QARDX,IAAA,eASHD,YAAAa,EAAAjB,EAAA,WAAA,IAAAoB,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAtB,MAAA,KAAA,EAAA,GArBLmB,EAAA,GAmCkC,eAAtBH,EAAIF,KAAKU,SAdhB,OAAAF,EAAAtB,KAAA,EAAAoB,mBAAAK,MAGCC,SAAYT,QAAc,CAAAU,MAAAX,EAAAF,KAAAa,MAAAH,SAAAR,EAAAF,KAAAU,YAH3BF,EAAAtB,KAAA,EAAA,MAAA,KAAA,EAGSmB,EAHTG,EAAAM,KAAAN,EAAAtB,KAAA,GAAA,MAAA,KAAA,EAAA,GAID,eAAYU,EAAQC,KAAIC,SAJvB,OAAAU,EAAAtB,KAAA,GAAAoB,mBAAAK,MAKqBR,SAAWP,QAAQC,CAARgB,MAAYf,EAAAA,KAA9Ce,MAAAH,SAAAR,EAAAF,KAAAU,YALEF,EAAAtB,KAAA,GAAA,MAAA,KAAA,GAKSmB,EALTG,EAAAM,KAAA,KAAA,GAoBOT,EAVNU,KAAcb,MAAKjB,KAAKC,MAAS,KAEbgB,EAAAF,KAAAgB,KAAAd,EAAAF,KAAAK,EAAAnB,KAAAD,EAAAO,OAAA,KAAAC,KAAA,CAAAC,SAAA,EAAAC,QAAA,qBAAAV,EAAAO,OAEVQ,KAAKU,KAAAA,CAAThB,SAAsB,EAAAC,QAFR,+BAZrB,KAAA,GAAA,IAAA,MAAA,OAAAa,EAAAS,aAYqBC,YAAA,SAAAhB,EAAAjB,EAAAC,GAAAG,YAAAa,EAAAjB,EAAA,WAGmB4B,GAAgBA,UAAhBA,EAAAA,KAAOX,KA0BxC,OAAOjB,EAAIO,OAAO,KAAKC,KAAK,CAAEC,SAAS,EAAOC,QAAS,2BA1BCe,OA+BpES,OAAOC,QAAU,CAlCS/B,YAAAA,YAAA0B,WAAAA,WAAAG,YAAAA,YAAAN,SAAAA","file":"verifyToken.min.js","sourcesContent":["const jwt = require('jsonwebtoken');\nconst db = require(\"../models\");\nconst Auth = db.authentications;\nconst Clinical =  db.clinical;\nconst Facility = db.facilities;\nconst expirationTime = 2592000;\n\nconst verifyToken = (req, res, next) => {\n    const authHeader = req.headers.authorization;\n    console.log(authHeader)\n    if (authHeader) {\n        console.log('hhhhhh')\n        const token = authHeader.split(' ')[1];\n        // console.log('token=-================>',\"----\",token)\n        if (!token) {\n            return res.status(401).json({ success: false, message: \"You are not authorized!\" });\n        }\n    \n        // If token exists, verify the token\n        jwt.verify(token, process.env.JWT_SECRET_KEY, (err, user) => {\n            if (err) {\n                console.log('err',err)\n                return res.status(401).json({ success: false, message: \"Token is invalid\" });\n            }\n            req.user = user;\n            // console.log(req.user)\n            next();\n        });\n    }\n};\n\nconst setToken = (tokendata) => {\n    console.log(process.env.JWT_SECRET_KEY)\n   const token = jwt.sign(tokendata, process.env.JWT_SECRET_KEY);\n   return token;\n}\n\n\nconst verifyUser = (req, res, next) => {\n    console.log('verifyToken')\n    verifyToken(req, res, async () => {\n        let isUser = {};\n        if (req.user.userRole === \"Facilities\") {\n            isUser = await Facility.findOne({email: req.user.email, userRole: req.user.userRole})\n        } else if(req.user.userRole === \"Clinician\") {\n            isUser = await Clinical.findOne({email: req.user.email, userRole: req.user.userRole})\n        }\n        // console.log(isUser, req.user)\n        if (isUser) {\n            const currentDate = Math.floor(Date.now() / 1000);\n            // console.log(currentDate);\n            if (currentDate < req.user.exp){\n                req.user = isUser;\n                // console.log('user', req.user)\n                next();\n            } else {\n                res.status(401).json({success: false, message: \"Token is expired\"})\n            }\n        }\n        else res.status(401).json({success: false, message: \"You are not authenticated!\"})\n    });\n\n};\n\nconst verifyAdmin = (req, res, next) => {\n    verifyToken(req, res, () => {\n        if (req.user.role === 'admin') {\n            next();\n        } else {\n            return res.status(401).json({ success: false, message: \"You are not authorized\" });\n        }\n    });\n};\n\nmodule.exports = {\n    verifyToken,\n    verifyUser,\n    verifyAdmin,\n    setToken\n};"]}